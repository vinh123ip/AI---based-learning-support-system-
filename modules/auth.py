import sqlite3
from passlib.context import CryptContext
from jose import jwt, JWTError
from datetime import datetime, timedelta
from typing import Optional, Tuple
import os
import re
import smtplib
import secrets
import time
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import config

class AuthManager:
    def __init__(self):
        self.pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
        self.SECRET_KEY = "your-secret-key-here"
        self.ALGORITHM = "HS256"
        self.config = config.get_config()
        
        # Simple in-memory OTP storage
        self.otp_storage = {}  # {email: {"otp": "123456", "expires": timestamp}}
        
        # NOTE: 2FA settings now stored in database, not memory
        # Removed: self.user_2fa_settings = {}
        
        self.init_database()
    
    def init_database(self):
        """Kh·ªüi t·∫°o database ƒë∆°n gi·∫£n"""
        conn = sqlite3.connect("cs466_database.db")
        cursor = conn.cursor()
        
        # T·∫°o b·∫£ng users v·ªõi email unique cho login
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                email TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                role TEXT NOT NULL,
                full_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # T·∫°o user m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
        cursor.execute("SELECT COUNT(*) FROM users")
        if cursor.fetchone()[0] == 0:
            # T·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh
            admin_password = self.get_password_hash("Admin123")
            cursor.execute('''
                INSERT INTO users (username, email, password_hash, role, full_name)
                VALUES (?, ?, ?, ?, ?)
            ''', ("admin", "admin@dtu.edu.vn", admin_password, "admin", "Administrator"))
            
            # T·∫°o t√†i kho·∫£n gi√°o vi√™n m·∫∑c ƒë·ªãnh
            teacher_password = self.get_password_hash("Teacher123")
            cursor.execute('''
                INSERT INTO users (username, email, password_hash, role, full_name)
                VALUES (?, ?, ?, ?, ?)
            ''', ("teacher", "teacher@dtu.edu.vn", teacher_password, "teacher", "Gi√°o vi√™n Demo"))
            
            # T·∫°o t√†i kho·∫£n sinh vi√™n m·∫∑c ƒë·ªãnh
            student_password = self.get_password_hash("Student123")
            cursor.execute('''
                INSERT INTO users (username, email, password_hash, role, full_name)
                VALUES (?, ?, ?, ?, ?)
            ''', ("student", "student@dtu.edu.vn", student_password, "student", "Sinh vi√™n Demo"))
        
        conn.commit()
        conn.close()
    
    def get_password_hash(self, password: str) -> str:
        """M√£ h√≥a m·∫≠t kh·∫©u"""
        return self.pwd_context.hash(password)
    
    def verify_password(self, plain_password: str, hashed_password: str) -> bool:
        """X√°c th·ª±c m·∫≠t kh·∫©u"""
        return self.pwd_context.verify(plain_password, hashed_password)
    
    def is_valid_email(self, email: str) -> bool:
        """Ki·ªÉm tra ƒë·ªãnh d·∫°ng email h·ª£p l·ªá"""
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None
    
    def email_exists(self, email: str) -> Tuple[bool, Optional[int]]:
        """
        Ki·ªÉm tra email c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng (silent check)
        
        Returns:
            Tuple (exists: bool, user_id: Optional[int])
        """
        if not self.is_valid_email(email):
            return False, None
        
        conn = sqlite3.connect("cs466_database.db")
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT id FROM users WHERE email = ?', (email,))
            result = cursor.fetchone()
            
            if result:
                return True, result[0]
            return False, None
            
        except Exception:
            return False, None
        finally:
            conn.close()
    
    def authenticate_user_by_email(self, email: str, password: str) -> Optional[dict]:
        """X√°c th·ª±c ng∆∞·ªùi d√πng b·∫±ng email v√† password"""
        if not self.is_valid_email(email):
            return None
        
        conn = sqlite3.connect("cs466_database.db")
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, username, email, password_hash, role, full_name
                FROM users WHERE email = ?
            ''', (email,))
            
            user = cursor.fetchone()
            
            if user and self.verify_password(password, user[3]):
                return {
                    "id": user[0],
                    "username": user[1],
                    "email": user[2],
                    "role": user[4],
                    "full_name": user[5]
                }
            return None
            
        except Exception:
            return None
        finally:
            conn.close()
    
    def generate_otp(self) -> str:
        """T·∫°o OTP 6 s·ªë ng·∫´u nhi√™n"""
        return str(secrets.randbelow(900000) + 100000)
    
    def cleanup_expired_otps(self):
        """X√≥a c√°c OTP ƒë√£ h·∫øt h·∫°n"""
        current_time = time.time()
        expired_emails = [email for email, data in self.otp_storage.items() 
                         if current_time > data["expires"]]
        
        for email in expired_emails:
            del self.otp_storage[email]
    
    def verify_otp(self, email: str, otp_code: str) -> bool:
        """X√°c th·ª±c OTP cho email c·ª• th·ªÉ"""
        try:
            # Cleanup expired OTPs
            self.cleanup_expired_otps()
            
            # Ki·ªÉm tra OTP c√≥ t·ªìn t·∫°i kh√¥ng
            stored_otp = self.otp_storage.get(email)
            if not stored_otp:
                return False
            
            # Ki·ªÉm tra m√£ OTP
            if stored_otp["otp"] != otp_code:
                return False
            
            # Ki·ªÉm tra h·∫øt h·∫°n
            if time.time() > stored_otp["expires"]:
                del self.otp_storage[email]
                return False
            
            # OTP h·ª£p l·ªá - x√≥a kh·ªèi storage
            del self.otp_storage[email]
            return True
            
        except Exception:
            return False

    def send_otp_email(self, to_email: str, otp_code: str, user_name: str) -> bool:
        """G·ª≠i OTP qua email ƒë∆°n gi·∫£n"""
        try:
            # T·∫°o email content
            subject = f"[CS466] M√£ x√°c th·ª±c ƒëƒÉng nh·∫≠p - {otp_code}"
            
            html_content = f"""
            <html>
                <body style="font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5;">
                    <div style="max-width: 500px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                        <h2 style="color: #4CAF50; text-align: center;">üîê X√°c th·ª±c ƒëƒÉng nh·∫≠p</h2>
                        <p>Xin ch√†o <strong>{user_name}</strong>!</p>
                        <p>M√£ OTP c·ªßa b·∫°n l√†:</p>
                        <div style="text-align: center; margin: 20px 0;">
                            <span style="font-size: 32px; font-weight: bold; color: #4CAF50; background: #f0f0f0; padding: 15px 25px; border-radius: 8px; letter-spacing: 5px;">{otp_code}</span>
                        </div>
                        <p style="color: #666; font-size: 14px;">M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.</p>
                        <p style="color: #666; font-size: 12px;">N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng nh·∫≠p, vui l√≤ng b·ªè qua email n√†y.</p>
                    </div>
                </body>
            </html>
            """
            
            # T·∫°o message
            message = MIMEMultipart('alternative')
            message['Subject'] = subject
            message['From'] = self.config.SMTP_USERNAME
            message['To'] = to_email
            
            html_part = MIMEText(html_content, 'html', 'utf-8')
            message.attach(html_part)
            
            # G·ª≠i email
            server = smtplib.SMTP(self.config.SMTP_SERVER, self.config.SMTP_PORT)
            server.starttls()
            server.login(self.config.SMTP_USERNAME, self.config.SMTP_PASSWORD)
            server.send_message(message)
            server.quit()
            
            return True
            
        except Exception as e:
            print(f"Email error: {e}")  # Simple logging
            return False
    
    def send_otp_to_email(self, email: str) -> Tuple[bool, str]:
        """G·ª≠i OTP ƒë·∫øn email (silent validation)"""
        # Cleanup expired OTPs
        self.cleanup_expired_otps()
        
        # Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng (silent)
        email_exists, user_id = self.email_exists(email)
        
        if not email_exists:
            return False, ""  # Silent fail
        
        # L·∫•y t√™n user ƒë·ªÉ g·ª≠i email
        conn = sqlite3.connect("cs466_database.db")
        cursor = conn.cursor()
        cursor.execute('SELECT full_name FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        full_name = result[0] if result else "Ng∆∞·ªùi d√πng"
        
        # T·∫°o OTP
        otp_code = self.generate_otp()
        
        # L∆∞u v√†o memory
        self.otp_storage[email] = {
            "otp": otp_code,
            "expires": time.time() + 300,  # 5 ph√∫t
            "user_id": user_id
        }
        
        # G·ª≠i email
        if self.send_otp_email(email, otp_code, full_name):
            return True, "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n"
        else:
            # X√≥a OTP n·∫øu g·ª≠i email th·∫•t b·∫°i
            if email in self.otp_storage:
                del self.otp_storage[email]
            return False, ""
    
    def verify_login_with_otp(self, email: str, password: str, otp_code: str) -> Tuple[bool, str, Optional[dict]]:
        """X√°c th·ª±c ƒëƒÉng nh·∫≠p: email + password + OTP"""
        try:
            # Cleanup expired OTPs
            self.cleanup_expired_otps()
            
            # B∆∞·ªõc 1: X√°c th·ª±c email + password
            user_data = self.authenticate_user_by_email(email, password)
            if not user_data:
                return False, "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng", None
            
            # B∆∞·ªõc 2: X√°c th·ª±c OTP
            stored_otp = self.otp_storage.get(email)
            if not stored_otp:
                return False, "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n", None
            
            if stored_otp["otp"] != otp_code:
                return False, "M√£ OTP kh√¥ng ƒë√∫ng", None
            
            if time.time() > stored_otp["expires"]:
                del self.otp_storage[email]
                return False, "M√£ OTP ƒë√£ h·∫øt h·∫°n", None
            
            # OTP h·ª£p l·ªá - x√≥a kh·ªèi storage
            del self.otp_storage[email]
            
            return True, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", user_data
            
        except Exception as e:
            return False, "L·ªói h·ªá th·ªëng", None
    
    def create_access_token(self, data: dict, expires_delta: Optional[timedelta] = None):
        """T·∫°o JWT access token"""
        to_encode = data.copy()
        if expires_delta:
            expire = datetime.utcnow() + expires_delta
        else:
            expire = datetime.utcnow() + timedelta(minutes=15)
        to_encode.update({"exp": expire})
        encoded_jwt = jwt.encode(to_encode, self.SECRET_KEY, algorithm=self.ALGORITHM)
        return encoded_jwt
    
    def get_user_by_id(self, user_id: int) -> Optional[dict]:
        """L·∫•y th√¥ng tin user theo ID"""
        conn = sqlite3.connect("cs466_database.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, username, role, full_name, email
            FROM users WHERE id = ?
        ''', (user_id,))
        
        user = cursor.fetchone()
        conn.close()
        
        if user:
            return {
                "id": user[0],
                "username": user[1],
                "role": user[2],
                "full_name": user[3],
                "email": user[4]
            }
        return None
    
    def register_user(self, username: str, password: str, role: str, full_name: str, email: str) -> bool:
        """ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi"""
        conn = sqlite3.connect("cs466_database.db")
        cursor = conn.cursor()
        
        try:
            password_hash = self.get_password_hash(password)
            cursor.execute('''
                INSERT INTO users (username, password_hash, role, full_name, email)
                VALUES (?, ?, ?, ?, ?)
            ''', (username, password_hash, role, full_name, email))
            conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False
        finally:
            conn.close()
    
    def is_2fa_enabled(self, user_id: int) -> bool:
        """Ki·ªÉm tra xem user c√≥ b·∫≠t 2FA kh√¥ng (default: True)"""
        # NOTE: This function now queries the database for 2FA settings
        conn = sqlite3.connect("cs466_database.db")
        cursor = conn.cursor()
        cursor.execute('''
            SELECT is_2fa_enabled FROM users WHERE id = ?
        ''', (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else True # Default True if not found
    
    def set_2fa_status(self, user_id: int, status: bool) -> None:
        """Set tr·∫°ng th√°i 2FA cho user"""
        # NOTE: This function now updates the database for 2FA settings
        conn = sqlite3.connect("cs466_database.db")
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users SET is_2fa_enabled = ? WHERE id = ?
        ''', (status, user_id))
        conn.commit()
        conn.close()
    
    def verify_login_with_conditional_otp(self, email: str, password: str, otp_code: str = "") -> Tuple[bool, str, Optional[dict]]:
        """X√°c th·ª±c ƒëƒÉng nh·∫≠p: email + password + OTP (n·∫øu 2FA b·∫≠t)"""
        try:
            # B∆∞·ªõc 1: X√°c th·ª±c email + password
            user_data = self.authenticate_user_by_email(email, password)
            if not user_data:
                return False, "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng", None
            
            user_id = user_data["id"]
            
            # B∆∞·ªõc 2: Ki·ªÉm tra 2FA c√≥ b·∫≠t kh√¥ng
            if not self.is_2fa_enabled(user_id):
                # 2FA t·∫Øt - ch·ªâ c·∫ßn email + password
                return True, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", user_data
            
            # B∆∞·ªõc 3: 2FA b·∫≠t - c·∫ßn x√°c th·ª±c OTP
            if not otp_code:
                return False, "Vui l√≤ng nh·∫≠p m√£ OTP", None
            
            # Cleanup expired OTPs
            self.cleanup_expired_otps()
            
            stored_otp = self.otp_storage.get(email)
            if not stored_otp:
                return False, "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n", None
            
            if stored_otp["otp"] != otp_code:
                return False, "M√£ OTP kh√¥ng ƒë√∫ng", None
            
            if time.time() > stored_otp["expires"]:
                del self.otp_storage[email]
                return False, "M√£ OTP ƒë√£ h·∫øt h·∫°n", None
            
            # OTP h·ª£p l·ªá - x√≥a kh·ªèi storage
            del self.otp_storage[email]
            
            return True, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", user_data
            
        except Exception as e:
            return False, "L·ªói h·ªá th·ªëng", None
    
    def send_otp_to_email_if_2fa_enabled(self, email: str) -> Tuple[bool, str]:
        """G·ª≠i OTP ƒë·∫øn email ch·ªâ khi user b·∫≠t 2FA"""
        # Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
        email_exists, user_id = self.email_exists(email)
        
        if not email_exists:
            return False, ""  # Silent fail
        
        # Ki·ªÉm tra 2FA c√≥ b·∫≠t kh√¥ng
        if not self.is_2fa_enabled(user_id):
            return False, ""  # Silent fail - kh√¥ng g·ª≠i OTP khi 2FA t·∫Øt
        
        # 2FA b·∫≠t - g·ª≠i OTP nh∆∞ b√¨nh th∆∞·ªùng
        return self.send_otp_to_email(email) 