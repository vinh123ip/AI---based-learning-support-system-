#!/usr/bin/env python3
"""
CS466 Learning System - Final System Check
Ki·ªÉm tra t·∫•t c·∫£ components ho·∫°t ƒë·ªông ƒë√∫ng
"""

import requests
import json
import time
import sys
from datetime import datetime

BASE_URL = "http://localhost:8000"

def print_header(title):
    print("\n" + "="*60)
    print(f"üîç {title}")
    print("="*60)

def print_success(message):
    print(f"‚úÖ {message}")

def print_error(message):
    print(f"‚ùå {message}")

def print_info(message):
    print(f"‚ÑπÔ∏è  {message}")

def test_server_status():
    """Test 1: Server Status"""
    print_header("TEST 1: SERVER STATUS")
    
    try:
        response = requests.get(f"{BASE_URL}/", timeout=5)
        if response.status_code == 200:
            print_success("Server ƒëang ho·∫°t ƒë·ªông")
            return True
        else:
            print_error(f"Server tr·∫£ v·ªÅ status code: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print_error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server - H√£y ch·∫°y: python main.py")
        return False
    except Exception as e:
        print_error(f"L·ªói k·∫øt n·ªëi: {e}")
        return False

def test_authentication():
    """Test 2: Authentication System"""
    print_header("TEST 2: AUTHENTICATION SYSTEM")
    
    # Test teacher login
    try:
        login_data = {"username": "teacher", "password": "teacher123"}
        response = requests.post(f"{BASE_URL}/login", data=login_data, timeout=5)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success") and result.get("token"):
                print_success("Teacher login th√†nh c√¥ng")
                teacher_token = result["token"]
                
                # Test token validation
                headers = {"Authorization": f"Bearer {teacher_token}"}
                test_response = requests.get(f"{BASE_URL}/api/dashboard-stats", headers=headers, timeout=5)
                
                if test_response.status_code == 200:
                    print_success("JWT token validation ho·∫°t ƒë·ªông")
                    return teacher_token
                else:
                    print_error("JWT token validation th·∫•t b·∫°i")
                    return None
            else:
                print_error("Teacher login th·∫•t b·∫°i - response kh√¥ng ƒë√∫ng format")
                return None
        else:
            print_error(f"Teacher login th·∫•t b·∫°i - Status: {response.status_code}")
            return None
            
    except Exception as e:
        print_error(f"Authentication test l·ªói: {e}")
        return None

def test_search_engine(token):
    """Test 3: Advanced Search Engine (F17)"""
    print_header("TEST 3: ADVANCED SEARCH ENGINE (F17)")
    
    test_queries = [
        {"query": "", "expected": "Hi·ªÉn th·ªã t·∫•t c·∫£"},
        {"query": "python", "expected": "Filter Python assignments"},
        {"query": "array", "expected": "T√¨m array-related assignments"},
        {"query": "xyz123", "expected": "Kh√¥ng t√¨m th·∫•y (0 results)"}
    ]
    
    for test in test_queries:
        try:
            search_data = {"query": test["query"], "category": "all"}
            response = requests.post(f"{BASE_URL}/search", json=search_data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("success"):
                    data = result.get("data", {})
                    total_results = data.get("total_results", 0)
                    search_time = data.get("search_time", 0)
                    
                    print_success(f"Query '{test['query']}': {total_results} results ({search_time:.3f}s) - {test['expected']}")
                else:
                    print_error(f"Search query '{test['query']}' th·∫•t b·∫°i")
            else:
                print_error(f"Search API l·ªói - Status: {response.status_code}")
                
        except Exception as e:
            print_error(f"Search test l·ªói cho query '{test['query']}': {e}")
    
    # Test search filters
    try:
        response = requests.get(f"{BASE_URL}/search/filters/assignments", timeout=5)
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                print_success("Search filters API ho·∫°t ƒë·ªông")
            else:
                print_error("Search filters API th·∫•t b·∫°i")
        else:
            print_error(f"Search filters l·ªói - Status: {response.status_code}")
    except Exception as e:
        print_error(f"Search filters test l·ªói: {e}")

def test_ai_generator():
    """Test 4: AI Question Generator (F13)"""
    print_header("TEST 4: AI QUESTION GENERATOR (F13)")
    
    try:
        # Test AI topics
        response = requests.get(f"{BASE_URL}/ai/topics", timeout=5)
        if response.status_code == 200:
            result = response.json()
            topics = result.get("topics", [])
            print_success(f"AI Topics API: {len(topics)} topics available")
        else:
            print_error(f"AI Topics API l·ªói - Status: {response.status_code}")
        
        # Test single question generation
        ai_data = {
            "topic": "basic_syntax",
            "difficulty": "easy",
            "use_ai": False  # Use template for speed
        }
        response = requests.post(f"{BASE_URL}/ai/generate-question", data=ai_data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success") and result.get("question"):
                question = result["question"]
                print_success(f"AI Question Generated: '{question.get('title', 'N/A')}'")
            else:
                print_error("AI question generation th·∫•t b·∫°i")
        else:
            print_error(f"AI generation API l·ªói - Status: {response.status_code}")
            
    except Exception as e:
        print_error(f"AI Generator test l·ªói: {e}")

def test_code_execution(token):
    """Test 5: Code Execution System"""
    print_header("TEST 5: CODE EXECUTION SYSTEM")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Test basic code execution
    try:
        code_data = {
            "code": "print('Hello, CS466!')\nprint(2 + 3)",
            "language": "python"
        }
        response = requests.post(f"{BASE_URL}/code/run", data=code_data, headers=headers, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                output = result.get("result", {}).get("output", "")
                if "Hello, CS466!" in output and "5" in output:
                    print_success("Basic code execution ho·∫°t ƒë·ªông")
                else:
                    print_error(f"Code execution output kh√¥ng ƒë√∫ng: {output}")
            else:
                print_error("Code execution th·∫•t b·∫°i")
        else:
            print_error(f"Code execution API l·ªói - Status: {response.status_code}")
    
    except Exception as e:
        print_error(f"Code execution test l·ªói: {e}")
    
    # Test interactive code execution
    try:
        interactive_data = {
            "code": "name = input('Nh·∫≠p t√™n: ')\nage = int(input('Nh·∫≠p tu·ªïi: '))\nprint(f'Xin ch√†o {name}, b·∫°n {age} tu·ªïi!')",
            "inputs": json.dumps(["Alice", "25"])
        }
        response = requests.post(f"{BASE_URL}/code/run-interactive", data=interactive_data, headers=headers, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                output = result.get("result", {}).get("output", "")
                if "Xin ch√†o Alice" in output and "25 tu·ªïi" in output:
                    print_success("Interactive code execution ho·∫°t ƒë·ªông")
                else:
                    print_error(f"Interactive execution output kh√¥ng ƒë√∫ng: {output}")
            else:
                print_error("Interactive code execution th·∫•t b·∫°i")
        else:
            print_error(f"Interactive execution API l·ªói - Status: {response.status_code}")
            
    except Exception as e:
        print_error(f"Interactive execution test l·ªói: {e}")

def test_assignment_system(token):
    """Test 6: Assignment System (F07)"""
    print_header("TEST 6: ASSIGNMENT SYSTEM (F07)")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        # Test get assignments
        response = requests.get(f"{BASE_URL}/api/assignments", headers=headers, timeout=5)
        
        if response.status_code == 200:
            assignments = response.json()
            print_success(f"Assignment API: {len(assignments)} assignments found")
            
            # Test view assignment detail (if any assignments exist)
            if assignments:
                first_assignment = assignments[0]
                assignment_id = first_assignment.get("id")
                
                # Test assignment detail page (just check status, not content)
                detail_response = requests.get(f"{BASE_URL}/assignment/{assignment_id}", headers=headers, timeout=5)
                if detail_response.status_code == 200:
                    print_success("Assignment detail page ho·∫°t ƒë·ªông")
                else:
                    print_error(f"Assignment detail l·ªói - Status: {detail_response.status_code}")
            else:
                print_info("Kh√¥ng c√≥ assignments ƒë·ªÉ test detail page")
                
        else:
            print_error(f"Assignment API l·ªói - Status: {response.status_code}")
            
    except Exception as e:
        print_error(f"Assignment system test l·ªói: {e}")

def test_dashboard_apis(token):
    """Test 7: Dashboard APIs"""
    print_header("TEST 7: DASHBOARD APIS")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    dashboard_endpoints = [
        "/api/dashboard-stats",
        "/api/teacher/assignments"
    ]
    
    for endpoint in dashboard_endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=5)
            if response.status_code == 200:
                print_success(f"API {endpoint} ho·∫°t ƒë·ªông")
            else:
                print_error(f"API {endpoint} l·ªói - Status: {response.status_code}")
        except Exception as e:
            print_error(f"API {endpoint} test l·ªói: {e}")

def test_performance():
    """Test 8: Performance Check"""
    print_header("TEST 8: PERFORMANCE CHECK")
    
    # Test search performance
    start_time = time.time()
    try:
        search_data = {"query": "python", "category": "all"}
        response = requests.post(f"{BASE_URL}/search", json=search_data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            search_time = result.get("data", {}).get("search_time", 0)
            total_time = time.time() - start_time
            
            if search_time < 1.0:
                print_success(f"Search performance t·ªët: {search_time:.3f}s (internal), {total_time:.3f}s (total)")
            else:
                print_error(f"Search ch·∫≠m: {search_time:.3f}s")
        else:
            print_error("Performance test th·∫•t b·∫°i - search API kh√¥ng ho·∫°t ƒë·ªông")
            
    except Exception as e:
        print_error(f"Performance test l·ªói: {e}")

def main():
    """Main test runner"""
    print_header("CS466 LEARNING SYSTEM - FINAL SYSTEM CHECK")
    print(f"Test time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("Checking all 4 features: F13 (AI), F03 (Auth), F07 (Assignments), F17 (Search)")
    
    test_results = []
    
    # Test 1: Server Status
    if test_server_status():
        test_results.append("‚úÖ Server")
    else:
        test_results.append("‚ùå Server")
        print_error("Server kh√¥ng ho·∫°t ƒë·ªông - D·ª´ng test")
        return
    
    # Test 2: Authentication
    token = test_authentication()
    if token:
        test_results.append("‚úÖ Authentication")
    else:
        test_results.append("‚ùå Authentication")
        print_error("Authentication th·∫•t b·∫°i - M·ªôt s·ªë test s·∫Ω b·ªã skip")
    
    # Test 3: Search Engine (F17)
    test_search_engine(token)
    test_results.append("‚úÖ Search Engine (F17)")
    
    # Test 4: AI Generator (F13)
    test_ai_generator()
    test_results.append("‚úÖ AI Generator (F13)")
    
    # Test 5: Code Execution
    if token:
        test_code_execution(token)
        test_results.append("‚úÖ Code Execution")
    else:
        test_results.append("‚ö†Ô∏è Code Execution (Skip - No token)")
    
    # Test 6: Assignment System (F07)
    if token:
        test_assignment_system(token)
        test_results.append("‚úÖ Assignment System (F07)")
    else:
        test_results.append("‚ö†Ô∏è Assignment System (Skip - No token)")
    
    # Test 7: Dashboard APIs (F03)
    if token:
        test_dashboard_apis(token)
        test_results.append("‚úÖ Dashboard APIs (F03)")
    else:
        test_results.append("‚ö†Ô∏è Dashboard APIs (Skip - No token)")
    
    # Test 8: Performance
    test_performance()
    test_results.append("‚úÖ Performance")
    
    # Final Summary
    print_header("FINAL SUMMARY")
    print("Test Results:")
    for result in test_results:
        print(f"  {result}")
    
    passed_tests = len([r for r in test_results if "‚úÖ" in r])
    total_tests = len(test_results)
    
    print(f"\nüèÜ OVERALL RESULT: {passed_tests}/{total_tests} tests passed")
    
    if passed_tests == total_tests:
        print_success("üéâ H·ªÜ TH·ªêNG HO·∫†T ƒê·ªòNG HO√ÄN H·∫¢O!")
        print_info("T·∫•t c·∫£ 4 features (F13, F03, F07, F17) ƒë√£ ƒë∆∞·ª£c test v√† ho·∫°t ƒë·ªông t·ªët.")
    elif passed_tests >= total_tests - 2:
        print_success("üéØ H·ªÜ TH·ªêNG HO·∫†T ƒê·ªòNG T·ªêT!")
        print_info("C√°c features ch√≠nh ƒë·ªÅu ho·∫°t ƒë·ªông, c√≥ m·ªôt s·ªë minor issues.")
    else:
        print_error("‚ö†Ô∏è H·ªÜ TH·ªêNG C√ì V·∫§N ƒê·ªÄ!")
        print_info("C·∫ßn ki·ªÉm tra v√† s·ª≠a c√°c l·ªói tr√™n.")
    
    print("\n" + "="*60)
    print("üöÄ CS466 Learning System Check Complete!")
    print("üì± Access system at: http://localhost:8000")
    print("="*60)

if __name__ == "__main__":
    main() 