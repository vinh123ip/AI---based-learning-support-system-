#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sqlite3
from datetime import datetime, timedelta
import random

def add_sample_assignments():
    """Th√™m c√°c b√†i t·∫≠p m·∫´u ƒë·ªÉ demo t√≠nh nƒÉng t√¨m ki·∫øm v√† s·∫Øp x·∫øp A-Z"""
    
    # Danh s√°ch b√†i t·∫≠p m·∫´u v·ªõi t√™n ƒëa d·∫°ng t·ª´ A-Z
    sample_assignments = [
        {'title': 'Array Manipulation in Python', 'description': 'H·ªçc c√°ch thao t√°c v·ªõi m·∫£ng v√† danh s√°ch trong Python', 'language': 'python', 'difficulty': 'easy', 'assignment_type': 'code'},
        {'title': 'Binary Search Algorithm', 'description': 'C√†i ƒë·∫∑t thu·∫≠t to√°n t√¨m ki·∫øm nh·ªã ph√¢n', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'Calculator Programming', 'description': 'T·∫°o m√°y t√≠nh ƒë∆°n gi·∫£n v·ªõi Python', 'language': 'python', 'difficulty': 'easy', 'assignment_type': 'code'},
        {'title': 'Database Connection', 'description': 'K·∫øt n·ªëi v√† thao t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu SQLite', 'language': 'python', 'difficulty': 'hard', 'assignment_type': 'code'},
        {'title': 'Error Handling Practice', 'description': 'Th·ª±c h√†nh x·ª≠ l√Ω l·ªói v√† exception trong Python', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'File Input/Output Operations', 'description': 'ƒê·ªçc v√† ghi file trong Python', 'language': 'python', 'difficulty': 'easy', 'assignment_type': 'code'},
        {'title': 'Graph Theory Basics', 'description': 'Gi·ªõi thi·ªáu l√Ω thuy·∫øt ƒë·ªì th·ªã v√† c√†i ƒë·∫∑t c∆° b·∫£n', 'language': 'python', 'difficulty': 'hard', 'assignment_type': 'code'},
        {'title': 'Hash Table Implementation', 'description': 'C√†i ƒë·∫∑t b·∫£ng bƒÉm t·ª´ ƒë·∫ßu', 'language': 'python', 'difficulty': 'hard', 'assignment_type': 'code'},
        {'title': 'Iterator and Generator', 'description': 'H·ªçc v·ªÅ iterator v√† generator trong Python', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'JSON Data Processing', 'description': 'X·ª≠ l√Ω d·ªØ li·ªáu JSON trong Python', 'language': 'python', 'difficulty': 'easy', 'assignment_type': 'code'},
        {'title': 'Ki·ªÉm tra s·ªë nguy√™n t·ªë', 'description': 'Vi·∫øt ch∆∞∆°ng tr√¨nh ki·ªÉm tra s·ªë nguy√™n t·ªë', 'language': 'python', 'difficulty': 'easy', 'assignment_type': 'code'},
        {'title': 'Linear Regression Model', 'description': 'C√†i ƒë·∫∑t m√¥ h√¨nh h·ªìi quy tuy·∫øn t√≠nh', 'language': 'python', 'difficulty': 'hard', 'assignment_type': 'code'},
        {'title': 'Matrix Operations', 'description': 'C√°c ph√©p to√°n ma tr·∫≠n c∆° b·∫£n', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'Network Programming', 'description': 'L·∫≠p tr√¨nh m·∫°ng c∆° b·∫£n v·ªõi socket', 'language': 'python', 'difficulty': 'hard', 'assignment_type': 'code'},
        {'title': 'Object-Oriented Programming', 'description': 'L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng trong Python', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'Prime Number Generator', 'description': 'Sinh s·ªë nguy√™n t·ªë b·∫±ng s√†ng Eratosthenes', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'Queue Data Structure', 'description': 'C√†i ƒë·∫∑t c·∫•u tr√∫c d·ªØ li·ªáu Queue', 'language': 'python', 'difficulty': 'easy', 'assignment_type': 'code'},
        {'title': 'Recursive Functions', 'description': 'Th·ª±c h√†nh c√°c h√†m ƒë·ªá quy', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'String Manipulation', 'description': 'Thao t√°c v·ªõi chu·ªói k√Ω t·ª± trong Python', 'language': 'python', 'difficulty': 'easy', 'assignment_type': 'code'},
        {'title': 'Tree Traversal Algorithms', 'description': 'C√°c thu·∫≠t to√°n duy·ªát c√¢y', 'language': 'python', 'difficulty': 'hard', 'assignment_type': 'code'},
        {'title': 'Unit Testing Practice', 'description': 'Th·ª±c h√†nh vi·∫øt unit test v·ªõi unittest', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'Variable Scope Quiz', 'description': 'Tr·∫Øc nghi·ªám v·ªÅ ph·∫°m vi bi·∫øn trong Python', 'language': 'python', 'difficulty': 'easy', 'assignment_type': 'quiz'},
        {'title': 'Web Scraping Basics', 'description': 'C∆° b·∫£n v·ªÅ thu th·∫≠p d·ªØ li·ªáu web', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'XML Parsing Exercise', 'description': 'Ph√¢n t√≠ch v√† x·ª≠ l√Ω file XML', 'language': 'python', 'difficulty': 'medium', 'assignment_type': 'code'},
        {'title': 'Yield and Coroutines', 'description': 'H·ªçc v·ªÅ yield v√† coroutines trong Python', 'language': 'python', 'difficulty': 'hard', 'assignment_type': 'code'},
        {'title': 'Zero Division Handling', 'description': 'X·ª≠ l√Ω l·ªói chia cho zero', 'language': 'python', 'difficulty': 'easy', 'assignment_type': 'code'}
    ]
    
    # K·∫øt n·ªëi database
    conn = sqlite3.connect('learning_system.db')
    cursor = conn.cursor()
    
    try:
        # L·∫•y teacher_id ƒë·∫ßu ti√™n c√≥ s·∫µn
        cursor.execute("SELECT id FROM users WHERE role = 'teacher' LIMIT 1")
        teacher_result = cursor.fetchone()
        
        if not teacher_result:
            print("Kh√¥ng t√¨m th·∫•y teacher trong database. T·∫°o teacher m·∫∑c ƒë·ªãnh...")
            cursor.execute("""
                INSERT INTO users (username, email, password_hash, full_name, role, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, ('teacher1', 'teacher1@example.com', 'hashed_password', 'Teacher One', 'teacher', datetime.now().isoformat()))
            teacher_id = cursor.lastrowid
        else:
            teacher_id = teacher_result[0]
        
        # Th√™m assignments
        for i, assignment in enumerate(sample_assignments):
            # T√≠nh deadline ng·∫´u nhi√™n trong 30 ng√†y t·ªõi
            days_ahead = random.randint(7, 30)
            deadline = datetime.now() + timedelta(days=days_ahead)
            
            # T√≠nh created_at trong 30 ng√†y qua
            days_ago = random.randint(1, 30)
            created_at = datetime.now() - timedelta(days=days_ago)
            
            cursor.execute("""
                INSERT INTO assignments (
                    title, description, assignment_type, language, difficulty,
                    teacher_id, deadline, created_at, starter_code, topic
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                assignment['title'],
                assignment['description'],
                assignment['assignment_type'],
                assignment['language'],
                assignment['difficulty'],
                teacher_id,
                deadline.isoformat(),
                created_at.isoformat(),
                f"# Starter code for {assignment['title']}\n# TODO: Implement your solution here\n",
                assignment['title'].lower().replace(' ', '_')
            ))
        
        conn.commit()
        print(f"‚úÖ ƒê√£ th√™m {len(sample_assignments)} b√†i t·∫≠p m·∫´u th√†nh c√¥ng!")
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        cursor.execute("SELECT COUNT(*) FROM assignments")
        total_assignments = cursor.fetchone()[0]
        print(f"üìä T·ªïng s·ªë b√†i t·∫≠p trong database: {total_assignments}")
        
        # Hi·ªÉn th·ªã c√°c b√†i t·∫≠p theo th·ª© t·ª± A-Z
        cursor.execute("SELECT title, difficulty FROM assignments ORDER BY title ASC LIMIT 10")
        assignments = cursor.fetchall()
        print("\nüìã 10 b√†i t·∫≠p ƒë·∫ßu ti√™n (s·∫Øp x·∫øp A-Z):")
        for title, difficulty in assignments:
            print(f"   ‚Ä¢ {title} ({difficulty})")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi th√™m d·ªØ li·ªáu: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ ƒêang th√™m b√†i t·∫≠p m·∫´u ƒë·ªÉ demo t√≠nh nƒÉng t√¨m ki·∫øm A-Z...")
    add_sample_assignments()
    print("\n‚ú® Ho√†n th√†nh! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ truy c·∫≠p http://localhost:8001/search ƒë·ªÉ xem k·∫øt qu·∫£.") 